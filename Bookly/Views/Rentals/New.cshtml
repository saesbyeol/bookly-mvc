@model dynamic

@{
    ViewBag.Title = "New Rental";
}

<h1>New Rental</h1>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
<script src="https://www.paypal.com/sdk/js?client-id=AaNO3rENhDS4b8vr0_h0H9TYWbf3lC4kxr1yTB7lkNEcfj4xxKHeE7D_w1p11rpepxxXAaR_oP-ZMgmz"></script>


<form id="newRental">
    <div class="form-group">
        <label>Customer</label>
        <div class="tt-container">
            <input id="customer" name="customer" data-rule-validCustomer="true" required type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="form-group">
        <label>Book</label>
        <div class="tt-container">
            <input id="book" name="book" data-rule-atLeastOneBook="true" type="text" value="" class="form-control" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-4">
            <ul id="books" class="list-group"></ul>
        </div>
    </div>
    
    
    
    <div class="container">
        <div class="row">
            <div class="col-sm">
                <button class="btn btn-primary">Rent</button>
                <button type="button" class="btn btn-danger" onclick="ClearFields();">Clear</button>
            </div>
        </div>
    </div>
    

    <hr></hr>
    <h2>Alternative payment options</h2>
    <div id="paypal-button-container"></div>


</form>
@section scripts
{
    <!-- EMAILJS CDN -->
    <script type="text/javascript"
            src="https://cdn.jsdelivr.net/npm/emailjs-com@2.4.0/dist/email.min.js">
    </script>
    <script type="text/javascript">
        (function(){
            emailjs.init("u0CFaF26mMCxAaRse"); //use your USER ID
        })();
    </script>
    

    @Scripts.Render("~/bundles/jqueryval")
    <!-- TWITTER TYPEAHEAD PLUGIN FOR AUTO-COMPLETION-->
    <script>
        $(document).ready(function () {

            var vm = {
                bookIds: []
            };

            var customers = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/customers?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#customer').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'customers',
                display: 'name',
                source: customers
            }).on("typeahead:select", function (e, customer) {
                vm.customerId = customer.id;
            });

            // BOOK AUTOCOMPLETE
            var books = new Bloodhound({
                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/books?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#book').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'books',
                display: 'name',
                source: books
            }).on("typeahead:select", function (e, book) {
                $("#books").append("<li class='list-group-item'>" + book.name + "</li>");
                $("#book").typeahead("val", "");
                vm.bookIds.push(book.id);
            });

            $.validator.addMethod("validCustomer",
                function () {
                    return vm.customerId && vm.customerId !== 0;
                },
                "Please select a valid customer.");

            $.validator.addMethod("atLeastOneBook",
                function () {
                    return vm.bookIds.length > 0;
                },
                "Please select at least one book.");

            var validator = $("#newRental").validate({
                submitHandler: function () {
                    $.ajax({
                            url: "/api/newRentals",
                            method: "post",
                            data: vm
                        })
                        .done(function () {
                            swal({
                                icon: "success",
                                text: "Rental successfully added!"
                            });

                            // EMAILJS SEND TO USER ON RENTAL
                            var templateParams = {
                                name: 'Bookie',
                                notes: 'Rent'
                            };
 
                            emailjs.send('service_3sryiyg', 'template_emcudbw', templateParams)
                                .then(function(response) {
                                    console.log('SUCCESS!', response.status, response.text);
                                }, function(error) {
                                    console.log('FAILED...', error);
                                });

                            // RESETS THE FORM
                            $("#customer").typeahead("val", "");
                            $("#book").typeahead("val", "");
                            $("#books").empty();

                            vm = { bookIds: [] };

                            validator.resetForm();
                        })
                        .fail(function () {
                            swal({
                                icon: "error",
                                text: "Something went wrong, double check your entries and try again!"
                            });
                        });
                    // PREVENTS THE FORM FROM SUBMITTING NORMALLY
                    return false;
                }
            });

        });


        // PAYPAL INTEGRATION
        paypal.Buttons({
            style: {
                layout: 'horizontal',
                color:  'black',
                shape:  'pill',
                label: 'paypal',
                tagline: false
            },
            createOrder: function(data, actions) {
                // Set up the transaction
                return actions.order.create({
                    purchase_units: [{
                        amount: {
                            value: '0.01'
                        }
                    }]
                });
            },

            onApprove: function(data, actions) {
                swal({
                    icon: "success",
                    text: "You have successfully made your purchase!"
                });

                // EMAIL JS SEND EMAIL TO USER
                var templateParams = {
                    name: 'Bookie',
                    notes: 'Purchase'
                };
 
                emailjs.send('service_3sryiyg', 'template_ake6wjk', templateParams)
                    .then(function(response) {
                        console.log('SUCCESS!', response.status, response.text);
                    }, function(error) {
                        console.log('FAILED...', error);
                    });
            },

            onError: function (err) {
                swal({
                    icon: "error",
                    text: "Something went wrong, double check your entries and try again!"
                });
            }
        }).render('#paypal-button-container');


        function ClearFields() {

            document.getElementById("customer").value = "";
            var element = document.getElementById("books");
            element.innerHTML = '';
        }

    </script>
    <!-- /// -->
}
